import java.net.*;
import java.util.*;
import java.io.*;


public class TrackerServer implements Runnable {
	public ServerSocket listen;						// for accepting connections
	private ArrayList<TrackerServerCommunicator> comms;	// all the connections with clients
	private DataTable dataTable;
	private int globalId;
	public boolean serverAlive;

	public DataTable getDataTable() {
		return dataTable;
	}

	public TrackerServer(ServerSocket listen) {
		this.listen = listen;
		dataTable = new DataTable();
		this.globalId = 0;
		serverAlive = true;
		comms = new ArrayList<TrackerServerCommunicator>();
	}

	/**
	 * The usual loop of accepting connections and firing off new threads to handle them
	 */
	public void getConnections() throws IOException {
		while (serverAlive) {
			try {
				TrackerServerCommunicator comm = 
						new TrackerServerCommunicator(listen.accept(), this, globalId++);
				comm.setDaemon(true);
				comm.start();
				addCommunicator(comm);
			} 
			catch (SocketException e) {
				dataTable.saveInfo("./");
				serverAlive = false;
			}
		}
	}

	/**
	 * Adds the communicator to the list of current communicators
	 */
	public synchronized void addCommunicator(TrackerServerCommunicator comm) {
		comms.add(comm);
	}

	/**
	 * Removes the communicator from the list of current communicators
	 */
	public synchronized void removeCommunicator(TrackerServerCommunicator comm) {
		comms.remove(comm);
	}

	public void run() {
		try {
			getConnections();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
