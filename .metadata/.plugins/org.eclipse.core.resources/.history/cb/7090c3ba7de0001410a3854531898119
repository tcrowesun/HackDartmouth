import java.io.*;
import java.net.Socket;

/**
 * Handles communication between the server and one client, for TrackerServer
 */
public class TrackerServerCommunicator extends Thread {
	private Socket sock;					// to talk with client
	private BufferedReader in;				// from client
	private PrintWriter out;				// to client
	private TrackerServer server;			// handling communication for

	public TrackerServerCommunicator(Socket sock, TrackerServer server) {
		this.sock = sock;
		this.server = server;
	}

	/**
	 * Sends a message to the client
	 * @param msg
	 */
	public void send(String msg) {
		out.println(msg);
	}

	/**
	 * Keeps listening for and handling (your code) messages from the client
	 */
	public void run() {
		try {
			System.out.println("someone connected");

			// Communication channel
			in = new BufferedReader(new InputStreamReader(sock.getInputStream()));
			out = new PrintWriter(sock.getOutputStream(), true);

			// Tell the client the current state of the world
			// YOUR CODE HERE
			for (int i=0; i<server.getSketch().size(); i++) {
				Shape s = server.getSketch().get(i);
				if (s != null) out.println("add "+i+" "+s);
			}

			// Keep getting and handling messages from the client
			// YOUR CODE HERE
			String msg;
			while ((msg = in.readLine()) != null) {
				System.out.println(msg);
				Message m = new Message(msg);
				m.update(server.getSketch()); 		// note that this may affect m itself...
				server.broadcast(m.toString());		// so we convert m back to a string rather than using the original msg
			}


			// Clean up -- note that also remove self from server's list so it doesn't broadcast here
			server.removeCommunicator(this);
			out.close();
			in.close();
			sock.close();
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}
}
